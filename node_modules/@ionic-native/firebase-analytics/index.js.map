{"version":3,"sources":["../../../src/@ionic-native/plugins/firebase-analytics/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AASH,IAAa,iBAAiB;IAAS,qCAAiB;IAAxD;;IAsDA,CAAC;IApDC;;;;;;OAMG;IAEH,oCAAQ,GAAR,UAAS,IAAY,EAAE,MAAW,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE7D;;;;;OAKG;IAEH,qCAAS,GAAT,UAAU,EAAU,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE/C;;;;;;OAMG;IAEH,2CAAe,GAAf,UAAgB,IAAY,EAAE,KAAa,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEtE;;;;OAIG;IAEH,sCAAU,GAAV,UAAW,OAAgB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEtD;;;;;OAKG;IAEH,4CAAgB,GAAhB,UAAiB,IAAY,IAAkB,MAAM,CAAC,CAAC,CAAC;IAQ1D,wBAAC;AAAD,CAtDA,AAsDC,CAtDsC,iBAAiB,GAsDvD;AANM,4BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA3CA;IADC,OAAO,EAAE;;;;iDACmD;AAS7D;IADC,OAAO,EAAE;;;;kDACqC;AAU/C;IADC,OAAO,EAAE;;;;wDAC4D;AAQtE;IADC,OAAO,EAAE;;;;mDAC4C;AAStD;IADC,OAAO,EAAE;;;;yDAC8C;AA9C7C,iBAAiB;IAR7B,MAAM,CAAC;QACN,UAAU,EAAE,mBAAmB;QAC/B,MAAM,EAAE,mCAAmC;QAC3C,SAAS,EAAE,oCAAoC;QAC/C,IAAI,EAAE,iEAAiE;QACvE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,iBAAiB,CAsD7B;SAtDY,iBAAiB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\r\n\r\n/**\r\n * @beta\r\n * @name Firebase Analytics\r\n * @description\r\n * Cordova plugin for Firebase Analytics\r\n *\r\n * Go to firebase console and export google-services.json and GoogleService-Info.plist. Put those files into the root of your cordova app folder.\r\n *\r\n * NOTE: on iOS in order to collect demographic, age, gender data etc. you should additionally include AdSupport.framework into your project.\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { FirebaseAnalytics } from '@ionic-native/firebase-analytics';\r\n *\r\n *\r\n * constructor(private firebaseAnalytics: FirebaseAnalytics) { }\r\n *\r\n * ...\r\n *\r\n * this.firebaseAnalytics.logEvent('page_view', {page: \"dashboard\"})\r\n *   .then((res: any) => console.log(res))\r\n *   .catch((error: any) => console.error(error));\r\n *\r\n * ```\r\n */\r\n@Plugin({\r\n  pluginName: 'FirebaseAnalytics',\r\n  plugin: 'cordova-plugin-firebase-analytics',\r\n  pluginRef: 'cordova.plugins.firebase.analytics',\r\n  repo: 'https://github.com/chemerisuk/cordova-plugin-firebase-analytics',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class FirebaseAnalytics extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Logs an app event.\r\n   * Be aware of automatically collected events.\r\n   * @param name {string} The name of the event\r\n   * @param params {any} Some param to configure something\r\n   * @return {Promise<any>} Returns a promise\r\n   */\r\n  @Cordova()\r\n  logEvent(name: string, params: any): Promise<any> { return; }\r\n\r\n  /**\r\n   * Sets the user ID property.\r\n   * This feature must be used in accordance with Google's Privacy Policy.\r\n   * @param id {string} The user ID\r\n   * @return {Promise<any>} Returns a promise\r\n   */\r\n  @Cordova()\r\n  setUserId(id: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * This feature must be used in accordance with Google's Privacy Policy.\r\n   * Be aware of automatically collected user properties.\r\n   * @param name {string} The property name\r\n   * @param value {string} The property value\r\n   * @return {Promise<any>} Returns a promise\r\n   */\r\n  @Cordova()\r\n  setUserProperty(name: string, value: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Sets whether analytics collection is enabled for this app on this device.\r\n   * @param enabled {boolean}\r\n   * @return {Promise<any>} Returns a promise\r\n   */\r\n  @Cordova()\r\n  setEnabled(enabled: boolean): Promise<any> { return; }\r\n\r\n  /**\r\n   * Sets the current screen name, which specifies the current visual context in your app.\r\n   * This helps identify the areas in your app where users spend their time and how they interact with your app.\r\n   * @param name {string} The name of the screen\r\n   * @return {Promise<any>} Returns a promise\r\n   */\r\n  @Cordova()\r\n  setCurrentScreen(name: string): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}